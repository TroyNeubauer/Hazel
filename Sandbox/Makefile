# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
INCLUDES += -I../Hazel/vendor/spdlog/include -I../Hazel/src -I../Hazel/vendor -I../Hazel/vendor/glm -I../Hazel/vendor/GLFW/include -I../Hazel/vendor/Glad/include -I../Hazel/vendor/TUtil/TUtil/include -I../Hazel/vendor/freeimage/Source -I../Hazel/vendor/freeimage/Source/FreeImage -I../Hazel/vendor/freeimage/Source/FreeImageToolkit -I../Hazel/vendor/freeimage/Source/LibOpenJPEG -I../Hazel/vendor/freeimage/Source/LibPNG -I../Hazel/vendor/freeimage/Source/Metadata -I../Hazel/vendor/freeimage/Source/ZLib
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug)
TARGETDIR = ../bin/Debug-linux-x86_64/Sandbox
TARGET = $(TARGETDIR)/Sandbox
OBJDIR = ../bin-int/Debug-linux-x86_64/Sandbox
DEFINES += -DGLM_FORCE_INTRINSICS -DFREEIMAGE_LIB -DHZ_PLATFORM_UNIX -DHZ_DEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -ffloat-store -g -mavx
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -ffloat-store -g -mavx -std=c++17
LIBS += ../bin/Debug-linux-x86_64/Hazel/libHazel.a ../bin/Debug-linux-x86_64/Glad/libGlad.a ../bin/Debug-linux-x86_64/ImGui/libImGui.a ../Hazel/vendor/GLFW/bin/Debug-linux-x86_64/GLFW/libGLFW.a ../bin/Debug-linux-x86_64/FastNoiseSIMD/libFastNoiseSIMD.a ../Hazel/vendor/TUtil/bin/Debug-linux-x86_64/TUtil/libTUtil.a ../bin/Debug-linux-x86_64/freeimage/libfreeimage.a ../bin/Debug-linux-x86_64/zlib/libzlib.a -lX11 -ldl
LDDEPS += ../bin/Debug-linux-x86_64/Hazel/libHazel.a ../bin/Debug-linux-x86_64/Glad/libGlad.a ../bin/Debug-linux-x86_64/ImGui/libImGui.a ../Hazel/vendor/GLFW/bin/Debug-linux-x86_64/GLFW/libGLFW.a ../bin/Debug-linux-x86_64/FastNoiseSIMD/libFastNoiseSIMD.a ../Hazel/vendor/TUtil/bin/Debug-linux-x86_64/TUtil/libTUtil.a ../bin/Debug-linux-x86_64/freeimage/libfreeimage.a ../bin/Debug-linux-x86_64/zlib/libzlib.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),release)
TARGETDIR = ../bin/Release-linux-x86_64/Sandbox
TARGET = $(TARGETDIR)/Sandbox
OBJDIR = ../bin-int/Release-linux-x86_64/Sandbox
DEFINES += -DGLM_FORCE_INTRINSICS -DFREEIMAGE_LIB -DHZ_PLATFORM_UNIX -DHZ_RELEASE
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -O3 -mavx
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -O3 -mavx -std=c++17
LIBS += ../bin/Release-linux-x86_64/Hazel/libHazel.a ../bin/Release-linux-x86_64/Glad/libGlad.a ../bin/Release-linux-x86_64/ImGui/libImGui.a ../Hazel/vendor/GLFW/bin/Release-linux-x86_64/GLFW/libGLFW.a ../bin/Release-linux-x86_64/FastNoiseSIMD/libFastNoiseSIMD.a ../Hazel/vendor/TUtil/bin/Release-linux-x86_64/TUtil/libTUtil.a ../bin/Release-linux-x86_64/freeimage/libfreeimage.a ../bin/Release-linux-x86_64/zlib/libzlib.a -lX11 -ldl
LDDEPS += ../bin/Release-linux-x86_64/Hazel/libHazel.a ../bin/Release-linux-x86_64/Glad/libGlad.a ../bin/Release-linux-x86_64/ImGui/libImGui.a ../Hazel/vendor/GLFW/bin/Release-linux-x86_64/GLFW/libGLFW.a ../bin/Release-linux-x86_64/FastNoiseSIMD/libFastNoiseSIMD.a ../Hazel/vendor/TUtil/bin/Release-linux-x86_64/TUtil/libTUtil.a ../bin/Release-linux-x86_64/freeimage/libfreeimage.a ../bin/Release-linux-x86_64/zlib/libzlib.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

else ifeq ($(config),dist)
TARGETDIR = ../bin/Dist-linux-x86_64/Sandbox
TARGET = $(TARGETDIR)/Sandbox
OBJDIR = ../bin-int/Dist-linux-x86_64/Sandbox
DEFINES += -DGLM_FORCE_INTRINSICS -DFREEIMAGE_LIB -DHZ_PLATFORM_UNIX -DHZ_DIST
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -O3 -mavx
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -O3 -mavx -std=c++17
LIBS += ../bin/Dist-linux-x86_64/Hazel/libHazel.a ../bin/Dist-linux-x86_64/Glad/libGlad.a ../bin/Dist-linux-x86_64/ImGui/libImGui.a ../Hazel/vendor/GLFW/bin/Dist-linux-x86_64/GLFW/libGLFW.a ../bin/Dist-linux-x86_64/FastNoiseSIMD/libFastNoiseSIMD.a ../Hazel/vendor/TUtil/bin/Dist-linux-x86_64/TUtil/libTUtil.a ../bin/Dist-linux-x86_64/freeimage/libfreeimage.a ../bin/Dist-linux-x86_64/zlib/libzlib.a -lX11 -ldl
LDDEPS += ../bin/Dist-linux-x86_64/Hazel/libHazel.a ../bin/Dist-linux-x86_64/Glad/libGlad.a ../bin/Dist-linux-x86_64/ImGui/libImGui.a ../Hazel/vendor/GLFW/bin/Dist-linux-x86_64/GLFW/libGLFW.a ../bin/Dist-linux-x86_64/FastNoiseSIMD/libFastNoiseSIMD.a ../Hazel/vendor/TUtil/bin/Dist-linux-x86_64/TUtil/libTUtil.a ../bin/Dist-linux-x86_64/freeimage/libfreeimage.a ../bin/Dist-linux-x86_64/zlib/libzlib.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

else
  $(error "invalid configuration $(config)")
endif

# Per File Configurations
# #############################################


# File sets
# #############################################

OBJECTS :=

OBJECTS += $(OBJDIR)/Sandbox.o
OBJECTS += $(OBJDIR)/Terrain.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking Sandbox
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning Sandbox
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/Sandbox.o: src/Sandbox.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Terrain.o: src/Terrain.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif